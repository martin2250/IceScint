#!/usr/bin/python

'''
Generate popcnt VHDL source file.

Author: Martin Pittermann <martin.pittermann@student.kit.edu>
'''

bits = [4, 6]

header = '''
--
-- Population Count
-- count the number of ones in a vector
--
-- generated by python script, do not modify manually!
--

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.numeric_std.all;

package popcnt is
'''

middle = '''
end popcnt;

package body popcnt is
'''

function_header = '''
	function popcnt{inbits}(inputVector : std_logic_vector) return unsigned is
		variable sum : unsigned({outbitsm1} downto 0);
	begin
		with inputVector(0 to {inbitsm1}) select
		sum :=
'''

lut_line = '\t\t\t"{o}" when "{i}",'
lut_last = '\t\t\t"{o}" when others;'

function_end = '''
		return sum;
	end;
'''

package_end = '''
end popcnt;
'''

with open('popcnt.gen.vhd', 'w') as file:
    print(header, file=file, end='')
    for inbits in bits:
        print(f'\tfunction popcnt{inbits}(inputVector : std_logic_vector) return unsigned;', file=file)
    print(middle, file=file, end='')
    for inbits in bits:
        outbits = inbits.bit_length()
        print(function_header.format_map({
            'inbits': inbits,
            'inbitsm1': inbits - 1,
            'outbitsm1': outbits - 1,
        }), file=file, end='')
        for n in range(1 << inbits):
            i = bin(n)[2:].zfill(inbits)
            o = bin(i.count('1'))[2:].zfill(outbits)
            print(lut_line.format_map({
                'i': i,
                'o': o,
            }), file=file)
        print(lut_last.format_map({
            'o': '0' * outbits,
        }), file=file)
        print(function_end, file=file, end='')
    print(package_end, file=file, end='')